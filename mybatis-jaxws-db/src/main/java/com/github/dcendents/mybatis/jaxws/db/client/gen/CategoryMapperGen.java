package com.github.dcendents.mybatis.jaxws.db.client.gen;

import com.github.dcendents.mybatis.jaxws.db.model.Category;
import com.github.dcendents.mybatis.jaxws.db.model.filter.CategoryFilter;
import com.github.dcendents.mybatis.jaxws.db.model.gen.CategoryGen;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectKey;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.session.RowBounds;

public interface CategoryMapperGen {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.category
     *
     * @mbggenerated
     */
    int countByFilter(CategoryFilter filter);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.category
     *
     * @mbggenerated
     */
    int deleteByFilter(CategoryFilter filter);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.category
     *
     * @mbggenerated
     */
    @Delete({
        "delete from public.category",
        "where category_id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.category
     *
     * @mbggenerated
     */
    @Insert({
        "insert into public.category (category_id, name, ",
        "last_update)",
        "values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, ",
        "#{modifiedOn,jdbcType=TIMESTAMP})"
    })
    @SelectKey(statement="select nextval('public.category_category_id_seq')", keyProperty="id", before=true, resultType=Integer.class)
    int insert(Category record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.category
     *
     * @mbggenerated
     */
    int insertSelective(Category record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.category
     *
     * @mbggenerated
     */
    List<Category> selectByFilterWithRowbounds(CategoryFilter filter, RowBounds rowBounds);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.category
     *
     * @mbggenerated
     */
    List<Category> selectByFilter(CategoryFilter filter);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.category
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "c.category_id as c_category_id, c.name as c_name, c.last_update as c_last_update",
        "from public.category c",
        "where c.category_id = #{id,jdbcType=INTEGER}"
    })
    @ResultMap("BaseResultMap")
    Category selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.category
     *
     * @mbggenerated
     */
    int updateByFilterSelective(@Param("record") Category record, @Param("example") CategoryFilter filter);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.category
     *
     * @mbggenerated
     */
    int updateByFilter(@Param("record") Category record, @Param("example") CategoryFilter filter);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.category
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(Category record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.category
     *
     * @mbggenerated
     */
    @Update({
        "update public.category",
        "set name = #{name,jdbcType=VARCHAR},",
          "last_update = #{modifiedOn,jdbcType=TIMESTAMP}",
        "where category_id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(Category record);
}