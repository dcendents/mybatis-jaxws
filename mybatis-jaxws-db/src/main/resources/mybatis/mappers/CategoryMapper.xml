<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.dcendents.mybatis.jaxws.db.client.CategoryMapper">
  <resultMap id="BaseResultMap" type="com.github.dcendents.mybatis.jaxws.db.model.Category">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="c_category_id" jdbcType="INTEGER" property="id" />
    <result column="c_name" jdbcType="VARCHAR" property="name" />
    <result column="c_last_update" jdbcType="TIMESTAMP" property="modifiedOn" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    c.category_id as c_category_id, c.name as c_name, c.last_update as c_last_update
  </sql>
  <select id="selectByFilter" parameterType="com.github.dcendents.mybatis.jaxws.db.model.filter.CategoryFilter" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from public.category c
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByFilter" parameterType="com.github.dcendents.mybatis.jaxws.db.model.filter.CategoryFilter">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from public.category c
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="com.github.dcendents.mybatis.jaxws.db.model.gen.CategoryGen">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Integer">
      select nextval('public.category_category_id_seq')
    </selectKey>
    insert into public.category
    <trim prefix="(" suffix=")" suffixOverrides=",">
      category_id,
      <if test="name != null">
        name,
      </if>
      <if test="modifiedOn != null">
        last_update,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{id,jdbcType=INTEGER},
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="modifiedOn != null">
        #{modifiedOn,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByFilter" parameterType="com.github.dcendents.mybatis.jaxws.db.model.filter.CategoryFilter" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from public.category c
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByFilterSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update public.category c
    <set>
      <if test="record.id != null">
        
      </if>
      <if test="record.name != null">
        c.name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.modifiedOn != null">
        c.last_update = #{record.modifiedOn,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByFilter" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update public.category c
    set 
      c.name = #{record.name,jdbcType=VARCHAR},
      c.last_update = #{record.modifiedOn,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.github.dcendents.mybatis.jaxws.db.model.gen.CategoryGen">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update public.category
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="modifiedOn != null">
        last_update = #{modifiedOn,jdbcType=TIMESTAMP},
      </if>
    </set>
    where category_id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByFilterWithRowbounds" parameterType="com.github.dcendents.mybatis.jaxws.db.model.filter.CategoryFilter" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from public.category c
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
	<resultMap extends="BaseResultMap" id="FullResultMap" type="com.github.dcendents.mybatis.jaxws.db.model.Category">
	</resultMap>
	<sql id="LeftJoinToFilm"> left join public.film_category ${FilmCategory.prefix} on ${Film.prefix}.film_id = ${FilmCategory.prefix}.film_id left join public.category ${Category.prefix} on ${Category.prefix}.category_id = ${FilmCategory.prefix}.category_id </sql>
	<insert id="insertFilmCategory">
		insert into public.film_category (category_id, film_id) 
        values (#{category.id,jdbcType=INTEGER}, #{film.id,jdbcType=INTEGER})
	</insert>
</mapper>